name: Deploy to VPS

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Pobierz repo
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Przygotuj klucz SSH z secreta (BASE64)
      #    W repo muszą być secrety:
      #    - SERVER_HOST (np. 158.220.110.193)
      #    - SERVER_PORT (np. 22)
      #    - SERVER_SSH_KEY_B64 (klucz ed25519 zakodowany base64)
      - name: Prepare SSH key from secret (base64)
        run: |
          set -euxo pipefail
          umask 077
          mkdir -p ~/.ssh
          printf '%s' "${{ secrets.SERVER_SSH_KEY_B64 }}" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      # 3) Test połączenia
      - name: SSH smoke test
        run: |
          ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no \
            -i ~/.ssh/id_ed25519 -p "${{ secrets.SERVER_PORT }}" \
            "archetypy@${{ secrets.SERVER_HOST }}" "echo OK-from-Runner"

      # 4) Spakuj repo bez śmieci
      - name: Create tarball
        run: |
          set -euxo pipefail
          tar -czf /tmp/app.tgz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='__pycache__' \
            --exclude='.venv' \
            --exclude='*.log' \
            -C "$GITHUB_WORKSPACE" .

      # 5) Wyślij paczkę na serwer
      - name: Upload tarball
        run: |
          scp -o IdentitiesOnly=yes -o StrictHostKeyChecking=no \
              -i ~/.ssh/id_ed25519 -P "${{ secrets.SERVER_PORT }}" \
              /tmp/app.tgz "archetypy@${{ secrets.SERVER_HOST }}:/tmp/app.tgz"

      # 6) Rozpakuj, zainstaluj zależności i zrestartuj usługę
      - name: Deploy on server (venv + restart service)
        env:
          SHA: ${{ github.sha }}
        run: |
          ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no \
              -i ~/.ssh/id_ed25519 -p "${{ secrets.SERVER_PORT }}" \
              "archetypy@${{ secrets.SERVER_HOST }}" "SHA='${SHA}' bash -s" <<'EOF'
          set -euxo pipefail

          APP_DIR="$HOME/panel"
          VENV=".venv"
          ENTRYPOINT="admin_dashboard.py"

          # 1) Pliki aplikacji
          mkdir -p "$APP_DIR"
          tar -xzf /tmp/app.tgz -C "$APP_DIR"
          rm -f /tmp/app.tgz

          # 2) Zapisz hash builda (pokazujemy go w sidebarze)
          echo "${SHA}" > "$APP_DIR/.deployed_sha"

          # 3) Venv + zależności
          cd "$APP_DIR"
          python3 -m venv "$VENV" || true
          "$APP_DIR/$VENV/bin/pip" install -U pip setuptools wheel
          if [ -f requirements.txt ]; then
            "$APP_DIR/$VENV/bin/pip" install -r requirements.txt
          fi

          # 4) Restart usługi (wymaga NOPASSWD na systemctl)
          sudo /usr/bin/systemctl restart archetypy-panel

          # 5) Pokaż status i logi (dla wglądu w Actions)
          sudo /usr/bin/systemctl status --no-pager --full -l archetypy-panel || true
          journalctl -u archetypy-panel -n 80 --no-pager || true
          EOF
